@inject IModalService ModalService
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IToastService ToastService
    <div class="simple-form">

        <div class="form-group">
            <label for="name-field">Name</label>
            <input @bind="@product.Name" type="text" id="name-field"/>
        </div>

        <div class="form-group">
            <label for="price-field">Price</label>
            <input @bind="@product.Price" type="text" id="price-field" />
        </div>
        <div class="form-group">
            <label for="Category" class="control-label">Category</label>
            <select id='category-input' for="Category" class="form-control" @bind="@product.CategoryId">
                <option id="category-placeholder" value="Selecteer categorie"></option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>



                }
            </select>
        </div>
        <button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="ConfirmClose">Submit</button>
        <button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="CancelClose">Cancel</button>
    </div>
@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public int Id { get; set; }
    IEnumerable<Category> categories = new List<Category>();
    Product product = new Product();



    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.SingleProduct(Id);
        categories = await CategoryService.GetCategories();
    }
    public async Task ConfirmClose()
    {
        await ProductService.EditProduct(Id, product);

        BlazoredModal.Close();

    }
    public void CancelClose()
    {


        BlazoredModal.Cancel();

    }
}
