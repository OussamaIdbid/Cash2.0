@inject IModalService ModalService
@inject IProductService ProductService
@inject IToastService ToastService
@inject IOptionService OptionService
    <div class="simple-form">

        <div class="form-group">
            <label for="name-field">Name</label>
            <input type="text" id="name-field" value="@product.Name" disabled />
        </div>

        <div class="form-group">
            <label for="price-field">Price</label>
            <input type="text" id="price-field" value="@product.Price" disabled />
        </div>
        <div class="form-group">
            <label for="amount-field">Hoeveelheid</label>
            <input @bind="@Amount" id="amount-field" type="text" />
        </div>

        @if (!FilteredOptions.Any())
        {

        }
        else
        {
            <div class="form-group">
                <label for="Option" class="control-label">Option</label>
                <select id='category-input' for="Category" class="form-control" @bind="@SelectedOptionId">
                    <option id="category-placeholder" value="Selecteer categorie"></option>
                    @foreach (var item in FilteredOptions)
                    {
                        <option value="@item.Id">@item.Description</option>
                    }
                </select>
                <button class="btn btn-sm btn-primary shadow-sm checkout-button m-1" @onclick="(() => AddOption())">Submit</button>
            </div>
            <div id="add-option-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Option</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in SelectedOptions)
                        {
                            <tr>
                                <td>@item.Description</td>
                                <td style="cursor:pointer" @onclick="(() => RemoveOption(item))"><span class="material-icons">delete</span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }



        <button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="AddToCart">Submit</button>
    </div>
@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public int ProductId { get; set; }

    IEnumerable<Option> options;
    List<Option> FilteredOptions = new List<Option>();
    int SelectedOptionId;
    List<Option> SelectedOptions = new List<Option>();
    Option option = new Option();
    public int Amount { get; set; }
    Product product = new Product();

    bool isDuplicateOption = false;


    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.SingleProduct(ProductId);
        options = await OptionService.GetOptions();

        foreach (var item in options)
        {
            if(item.ProductId == ProductId)
            {
                FilteredOptions.Add(item);
                //Console.WriteLine(item.Description);
            }

        }


    }
    public async Task AddOption()
    {
        Option SelectedOption = await OptionService.SingleOption(SelectedOptionId);

        foreach (var item in SelectedOptions)
        {
            if(item.Id == SelectedOption.Id)
            {
                isDuplicateOption = true;
            }
        }

        if (isDuplicateOption)
        {
            ToastService.ShowToast(ToastLevel.Info, "Option already added");
            isDuplicateOption = false;
        }
        else if (SelectedOption == null)
        {
            Console.WriteLine("no option selected");
        }
        else
        {
            SelectedOptions.Add(SelectedOption);
            isDuplicateOption = false;

        }

    }
    public void RemoveOption(Option option)
    {
        SelectedOptions.Remove(option);
        foreach (var item in SelectedOptions)
        {
            Console.WriteLine(item.Description);
        }
    }
    public void AddToCart()
    {
        OrderItem orderItem = new OrderItem();
        orderItem.Quantity = Amount;
        orderItem.TotalPrice = ((Math.Round(product.Price,2)) * Amount);
        orderItem.Product = product;
        orderItem.Options = SelectedOptions;

        if(orderItem.Quantity == 0)
        {
            ToastService.ShowToast(ToastLevel.Info, "Please choose an amount");

        }
        else
        {
            BlazoredModal.Close(ModalResult.Ok(orderItem));

        }

    }
}
