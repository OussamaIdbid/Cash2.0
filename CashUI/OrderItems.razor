@inject IOperationService OperationService

@if (orderItems == null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Prijs</th>
                <th>Q</th>
                <th>Totaal</th>
                <th style="color:white">Actions</th>
            </tr>
        </thead>
    </table>
        }
        else
        {
        <table class="table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Prijs</th>
                    <th>Q</th>
                    <th>Totaal</th>
                    <th style="color:white">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item1 in orderItems)
                {

                    <tr>
                        <td>@item1.Product.Name</td>
                        <td>€@item1.Product.Price</td>
                        <td>@item1.Quantity</td>
                        <td>€@item1.TotalPrice</td>
                        <td style="cursor:pointer" @onclick="(() => Remove(item1))"><span class="material-icons">delete</span></td>
                    </tr>
                }
            </tbody>
        </table>
        }
        @code {

    [Parameter]
        public List<OrderItem> orderItems { get; set; }
        Operation operation = new Operation();

        [Parameter] public EventCallback<double> OnPriceChanged { get; set; }
        [Parameter] public EventCallback<List<OrderItem>> OnProductRemoved { get; set; }


        protected async Task Remove(OrderItem orderItem)
        {
            double PriceReduction = orderItem.TotalPrice;

            orderItems.Remove(orderItem);


            operation.Description = User.CurrentUsername + " has removed " + orderItem.Product.Name + " from order";

            OnPriceChanged.InvokeAsync(PriceReduction);
            OnProductRemoved.InvokeAsync(orderItems);

            await OperationService.CreateOperation(operation);


        }
        protected override async Task OnParametersSetAsync()
        {
            operation.UserId = User.CurrentId;

        }

        }
