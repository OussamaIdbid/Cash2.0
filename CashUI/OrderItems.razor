@inject IOperationService OperationService

@if (orderItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Prijs</th>
                <th>Quantity</th>
                <th>Totaal</th>
                <th style="color:white">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item1 in orderItems)
            {

            <tr>
                <td>@item1.Product.Name</td>
                <td>€@item1.Product.Price</td>
                <td>@item1.Quantity</td>
                <td>€@item1.TotalPrice</td>
                <td @onclick="(() => Remove(item1))">remove</td>
            </tr>
            }
        </tbody>
    </table>
}
@code {

    [Parameter]
    public List<OrderItem> orderItems { get; set; }
    Operation operation = new Operation();

    [Parameter] public EventCallback<double> OnPriceChanged { get; set; }

    //public List<Product> FilteredorderItems { get; set; }

    protected async Task Remove(OrderItem orderItem)
    {
        double PriceReduction = orderItem.TotalPrice;

        orderItems.Remove(orderItem);


        operation.Description = User.CurrentUsername + " has removed " + orderItem.Product.Name + " from order";

        OnPriceChanged.InvokeAsync(PriceReduction);

        await OperationService.CreateOperation(operation);


    }
    protected override async Task OnParametersSetAsync()
    {
        operation.UserId = User.CurrentId;

        //orderItems.GroupBy(n => n).Any(c => c.Count() > 1);
        //for (int i = 0; i < orderItems.Count; i++)
        //{
        //    Console.WriteLine(orderItems[i].Price);
        //}
    }

}
