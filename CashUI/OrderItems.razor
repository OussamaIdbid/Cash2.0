@inject IOperationService OperationService

@if (orderItems == null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Prijs</th>
                <th>Q</th>
                <th>Totaal</th>
                <th style="color:white">Actions</th>
            </tr>
        </thead>
    </table>
        }
        else
        {
        <table class="table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Prijs</th>
                    <th>Q</th>
                    <th>Totaal</th>
                    <th style="color:white">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item1 in orderItems)
                {

                    <tr>
                        <td class="order-line">@item1.Product.Name</td>
                        <td class="order-line">€@item1.Product.Price</td>
                        <td class="d-flex flex-row"><span  @onclick="(() => ReduceQuantity(item1))" style="cursor:pointer; visibility:@item1.MinusBtnVisibility;" class="material-icons">remove</span><p class="m-1">@item1.Quantity</p><span @onclick="(() => IncreaseQuantity(item1))" style="cursor:pointer" class="material-icons">add</span></td>
                        <td class="order-line">€@item1.TotalPrice</td>
                        <td style="cursor:pointer" @onclick="(() => Remove(item1))"><span class="material-icons">delete</span></td>
                    </tr>
                }
            </tbody>
        </table>
        }
        @code {

            [Parameter]
            public List<OrderItem> orderItems { get; set; }
            Operation operation = new Operation();
            string visibility = "visible";


            [Parameter] public EventCallback<double> OnPriceReduced { get; set; }
            [Parameter] public EventCallback<double> OnPriceIncreased { get; set; }
            [Parameter] public EventCallback<List<OrderItem>> OnProductRemoved { get; set; }


            protected async Task Remove(OrderItem orderItem)
            {
                double PriceReduction = orderItem.TotalPrice;

                orderItems.Remove(orderItem);


                operation.Description = User.CurrentUsername + " has removed " + orderItem.Product.Name + " from order";

                OnPriceReduced.InvokeAsync(PriceReduction);
                OnProductRemoved.InvokeAsync(orderItems);

                await OperationService.CreateOperation(operation);


            }
            protected async Task ReduceQuantity(OrderItem orderItem)
            {

                orderItem.Quantity--;
                orderItem.TotalPrice -= orderItem.Product.Price;
                OnPriceReduced.InvokeAsync(orderItem.Product.Price);
                OnProductRemoved.InvokeAsync(orderItems);

                if (orderItem.Quantity == 1)
                {
                    orderItem.MinusBtnVisibility = "hidden";
                }



            }
            protected async Task IncreaseQuantity(OrderItem orderItem)
            {
                if(orderItem.Quantity == 1)
                {
                    orderItem.MinusBtnVisibility = "visible";
                    orderItem.Quantity++;
                    orderItem.TotalPrice += orderItem.Product.Price;
                    OnPriceIncreased.InvokeAsync(orderItem.Product.Price);
                    OnProductRemoved.InvokeAsync(orderItems);
                }
                else
                {
                    orderItem.Quantity++;
                    orderItem.TotalPrice += orderItem.Product.Price;
                    OnPriceIncreased.InvokeAsync(orderItem.Product.Price);
                    OnProductRemoved.InvokeAsync(orderItems);
                }

            }
            protected override async Task OnParametersSetAsync()
            {
                operation.UserId = User.CurrentId;
                foreach(var item in orderItems)
                {
                    if(item.Quantity == 1)
                    {
                        item.MinusBtnVisibility = "hidden";
                    }
                    else
                    {
                        item.MinusBtnVisibility = "visible";
                    }
                }


            }

        }
