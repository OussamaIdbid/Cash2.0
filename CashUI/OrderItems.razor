@inject IOperationService OperationService
@inject IModalService ModalService
@if (orderItems == null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Prijs</th>
                <th>Q</th>
                <th>Totaal</th>
                <th style="color:white">Actions</th>
            </tr>
        </thead>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Prijs</th>
                <th>Q</th>
                <th>Totaal</th>
                <th style="color:white">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item1 in orderItems)
            {

                <tr>
                    <td class="order-line">@item1.Product.Name</td>
                    <td class="order-line">€@item1.Product.Price</td>
                    <td class="d-flex flex-row"><span @onclick="(() => ReduceQuantity(item1))" style="cursor:pointer; visibility:@item1.MinusBtnVisibility;" class="material-icons">remove</span><p class="m-1">@item1.Quantity</p><span @onclick="(() => IncreaseQuantity(item1))" style="cursor:pointer" class="material-icons">add</span></td>
                    <td class="order-line">€@item1.TotalPrice</td>
                    <td class="order-line" @onclick="(() => ShowOptions(item1))">options</td>

                    <td style="cursor:pointer" @onclick="(() => Remove(item1))"><span class="material-icons">delete</span></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {

    [Parameter]
    public List<OrderItem> orderItems { get; set; } = new List<OrderItem>();
    Operation operation = new Operation();
    string visibility = "visible";


    [Parameter] public EventCallback<double> OnPriceReduced { get; set; }
    [Parameter] public EventCallback<double> OnPriceIncreased { get; set; }
    [Parameter] public EventCallback<OrderItem> OnProductRemoved { get; set; }


    protected async Task Remove(OrderItem orderItem)
    {
        double PriceReduction = orderItem.TotalPrice;

        //orderItems.Remove(orderItem);


        operation.Description = User.CurrentUsername + " has removed " + orderItem.Product.Name + " from order";

        OnPriceReduced.InvokeAsync(PriceReduction);
        OnProductRemoved.InvokeAsync(orderItem);

        await OperationService.CreateOperation(operation);


    }
    protected async Task ReduceQuantity(OrderItem orderItem)
    {

        orderItem.Quantity--;
        orderItem.TotalPrice -= orderItem.Product.Price;
        OnPriceReduced.InvokeAsync(orderItem.Product.Price);


        if (orderItem.Quantity == 0)
        {
            orderItem.MinusBtnVisibility = "hidden";
            OnProductRemoved.InvokeAsync(orderItem);

        }



    }
    protected async Task IncreaseQuantity(OrderItem orderItem)
    {
        if (orderItem.Quantity == 1)
        {
            orderItem.MinusBtnVisibility = "visible";
            orderItem.Quantity++;
            orderItem.TotalPrice += orderItem.Product.Price;
            OnPriceIncreased.InvokeAsync(orderItem.Product.Price);
            //3OnProductRemoved.InvokeAsync(orderItem);
        }
        else
        {
            orderItem.Quantity++;
            orderItem.TotalPrice += orderItem.Product.Price;
            OnPriceIncreased.InvokeAsync(orderItem.Product.Price);
            //OnProductRemoved.InvokeAsync(orderItem);
        }
    }
    public void ShowOptions(OrderItem orderitem)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(OrderlineOptions.options), orderitem.Options);
        var optionsModal = ModalService.Show<OrderlineOptions>("Selected Options", parameters);
    }
    protected override async Task OnParametersSetAsync()
    {

        //Console.WriteLine(orderItems.Count());
        if (orderItems != null)
        {
            operation.UserId = User.CurrentId;
            foreach (var item in orderItems)
            {
                if (item.Quantity == 1)
                {
                    item.MinusBtnVisibility = "visible";
                }
                else
                {
                    item.MinusBtnVisibility = "visible";
                }
            }
            foreach (var item in orderItems)
            {
                item.TotalPrice = Math.Round(item.TotalPrice, 2);

            }

        }

    }

}
