@inject IProductService ProductService


    <div class="">
        <div class="product-container">


            @if (products == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var product in products)
                {

                    <p   class="product-test shadow " @onclick="(() => showName(product))">
                        @product.Name
                    </p>

                }
            }
        </div>

    </div>

    @code {
        [Parameter]
        public int Id { get; set; }

        public Product SelectedProduct { get; set; }
        public List<Product> orderItems = new List<Product>();

        [Parameter] public EventCallback<List<Product>> OnListChanged { get; set; }


        //[Parameter]
        //public IEnumerable<Product> products { get; set; }



        public event Action OnChange;

        IEnumerable<Product> products;


        protected override async Task OnParametersSetAsync()
        {

            products = await ProductService.GetProductsByCategory(Id);


        }

        public string showName(Product product)
        {
            Console.WriteLine(product.Name + " " + product.Price);

            orderItems.Add(product);
            for(int i = 0; i < orderItems.Count; i++)
            {
                Console.WriteLine(orderItems[i].Name);
            }

            OnListChanged.InvokeAsync(orderItems);


            return product.Name;
        }


    }




