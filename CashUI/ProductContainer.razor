@inject IProductService ProductService
@inject ITableService TableService
@inject IModalService ModalService
@inject IToastService ToastService
@inject IOperationService OperationService



<div class="">
    <div class="product-container">


        @if (products == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var product in products)
            {

                <p class="product-test rounded shadow-sm " @onclick="(() => showName(product))">
                    @product.Name
                </p>

            }
        }
    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    Operation operation = new Operation();

    public Product SelectedProduct { get; set; }

    bool TableIsTaken = false;

    public List<OrderItem> orderItems = new List<OrderItem>();

    [Parameter] public EventCallback<List<OrderItem>> OnListChanged { get; set; }

    IEnumerable<Product> products;

    protected override async Task OnParametersSetAsync()
    {

        products = await ProductService.GetProductsByCategory(Id);

    }

    public async Task showName(Product product)
    {
        IEnumerable<Table> tables = await TableService.GetTables();
        foreach (var item in tables)
        {
            if(item.status == Table.Status.Taken)
            {
                Table.isTaken = true;
                Table.CurrentTable = item.Id;
            }
        }


        if (Table.isTaken == true)
        {


            var parameters = new ModalParameters();
            parameters.Add(nameof(ProductModal.ProductId), product.Id);
            var productModal = ModalService.Show<ProductModal>("Add product", parameters);
            var result = await productModal.Result;

            if (result.Cancelled)
            {
                ToastService.ShowToast(ToastLevel.Info, "Action Cancelled");
            }
            else
            {
                operation.UserId = User.CurrentId;
                operation.Description = User.CurrentUsername + " has added " + product.Name + " to order";

                OrderItem SubmittedItem = (OrderItem)result.Data;
                SubmittedItem.TotalPrice = Math.Round(SubmittedItem.TotalPrice, 2);
                orderItems.Add(SubmittedItem);
                OnListChanged.InvokeAsync(orderItems);
                SendOperation();
            }
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Info, "Select a table before adding products to order");
        }


    }

    public void OrderSubmit(OrderItem orderItem)
    {
        orderItems.Add(orderItem);
        OnListChanged.InvokeAsync(orderItems);
    }
    protected async Task SendOperation()
    {
        await OperationService.CreateOperation(operation);
    }
}




