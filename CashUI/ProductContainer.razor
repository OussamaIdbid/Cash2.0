@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject ITableService TableService
@inject IModalService ModalService
@inject IToastService ToastService
@inject IOperationService OperationService



    <div id="left-product" class=" d-flex flex-column">
        <div class="product-container">


            @if (products == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var item in products)
                {

                    <p class="product-button rounded shadow-sm" style="background-color:@item.Color; color:@item.textColor;" @onclick="(() => GetProduct(item))">
                        @item.Name
                    </p>

                }
            }

        </div>

        <div class="search-container mt-auto">
            <span @onclick="(() => ClearSearch())" class="material-icons" id="clear-search">
                clear
            </span>
            <input id="search-input" @bind="@SearchQuery" type="text" placeholder="Search Product" name="search">
            <button class="checkout-button btn btn-sm" @onclick="(() => SearchProduct())">Search</button>
        </div>
    </div>


@code {
    [Parameter]
    public int Id { get; set; }
    string SearchQuery;
    Operation operation = new Operation();

    public Product SelectedProduct { get; set; }

    bool TableIsTaken = false;

    public OrderItem orderItems = new OrderItem();

    [Parameter] public EventCallback<OrderItem> OnListChanged { get; set; }

    IEnumerable<Product> products;
    IEnumerable<Product> SearchedProducts = new List<Product>();
    Category category;

    protected override async Task OnParametersSetAsync()
    {

        products = await ProductService.GetProductsByCategory(Id);
        if (SearchedProducts.Any())
        {
            Console.WriteLine("not empty");
            products = SearchedProducts;
        }

        foreach (var item in products)
        {
            category = await CategoryService.SingleCategory(item.CategoryId);

            item.Color = category.Color;
        }

    }
    public async Task SearchProduct()
    {

        if(SearchQuery != null)
        {
            SearchedProducts = await ProductService.SearchProductsByCategory(Id, SearchQuery);

            if (SearchedProducts.Any())
            {
                products = SearchedProducts;
                foreach (var item in products)
                {
                    category = await CategoryService.SingleCategory(item.CategoryId);

                    item.Color = category.Color;
                }
            }
            else
            {
                ToastService.ShowToast(ToastLevel.Info, "No products found");

            }

        }
        else
        {
            ToastService.ShowToast(ToastLevel.Info, "No search query found");

        }


    }
    public async Task ClearSearch()
    {
        products = await ProductService.GetProductsByCategory(Id);
        SearchedProducts = new List<Product>();
        SearchQuery = null;
        foreach (var item in products)
        {
            category = await CategoryService.SingleCategory(item.CategoryId);

            item.Color = category.Color;
        }
    }
    public async Task GetProduct(Product product)
    {
        IEnumerable<Table> tables = await TableService.GetTables();
        /*foreach (var item in tables)
        {
            if (item.status == Table.Status.Taken)
            {
                Table.isTaken = true;
                Table.CurrentTable = item.Id;
            }
        }*/


        if (Table.CurrentTable != 0)
        {


            var parameters = new ModalParameters();
            parameters.Add(nameof(ProductModal.ProductId), product.Id);
            var productModal = ModalService.Show<ProductModal>("Add product", parameters);
            var result = await productModal.Result;

            if (result.Cancelled)
            {
                ToastService.ShowToast(ToastLevel.Info, "Action Cancelled");
            }
            else
            {
                operation.UserId = User.CurrentId;
                operation.Description = User.CurrentUsername + " has added " + product.Name + " to order";

                OrderItem SubmittedItem = (OrderItem)result.Data;
                SubmittedItem.TotalPrice = Math.Round(SubmittedItem.TotalPrice, 2);
                //orderItems.Add(SubmittedItem);
                OnListChanged.InvokeAsync(SubmittedItem);
                SendOperation();


            }
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Info, "Select a table before adding products to order");
        }


    }

    public void OrderSubmit(OrderItem orderItem)
    {

        OnListChanged.InvokeAsync(orderItem);
    }
    protected async Task SendOperation()
    {
        await OperationService.CreateOperation(operation);
    }
}




