@inject IModalService ModalService
@inject ITableService TableService
@inject IOperationService OperationService
@inject IProductService ProductService

    <div class="container d-flex flex-row">
        @if (tables == null)
        {
            <p><em>No Tables found</em></p>
        }
        else
        {<div class="d-flex flex-column m-1">
            <p style="text-align:center;">Open Tables</p>
            @foreach (var table in tables)
            {
                if (table.status == Table.Status.Open)
                {
                    <button @onclick="(() => UpdateTable(table))" type="button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">@table.Id </button>

                }
            }
        </div>
         <div class="d-flex flex-column m-1">
             <p style="text-align:center">Taken Tables</p>
             @foreach (var table in tables)
             {
                 if (table.status == Table.Status.Taken)
                 {
                     <button @onclick="(() => UpdateTable(table))" type="button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">@table.Id </button>
                 }
             }
         </div>
        }
    </div>
@code {
    IEnumerable<Table> tables;
    IEnumerable<Product> products;
    Operation operation = new Operation();

    public int amountOfTakenTables { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        tables = await TableService.GetTables();
        products = await ProductService.GetProducts();
        operation.UserId = User.CurrentId;

        foreach (var item in tables)
        {
            if(item.status == Table.Status.Taken)
            {
                Table.isTaken = true;
                //comment
            }
        }

    }
    protected async Task UpdateTable(Table table)
    {

        amountOfTakenTables = 0;

        foreach (var item in tables)
        {
            if (item.status == Table.Status.Taken)
            {
                //Console.WriteLine(item.status);
                amountOfTakenTables++;
                Console.WriteLine(amountOfTakenTables);
            }

        }

        if (table.status == Table.Status.Taken)
        {
            operation.Description = User.CurrentUsername + "has registered table" + table.Id + "as open";
            table.status = Table.Status.Open;
            await TableService.EditTable(table.Id, table);
            await OperationService.CreateOperation(operation);
            Table.isTaken = false;
        }
        else
        {
            if (amountOfTakenTables == 0)
            {
                operation.Description = User.CurrentUsername + "has registered table" + table.Id + "as closed";

                table.status = Table.Status.Taken;
                await OperationService.CreateOperation(operation);
                await TableService.EditTable(table.Id, table);
                Table.isTaken = true;

            }
            else
            {
                Console.WriteLine("Önly one table can be opened at a time");
            }


        }
    }
}
