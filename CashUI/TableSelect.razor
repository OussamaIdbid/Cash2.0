@inject IModalService ModalService
@inject ITableService TableService
@inject IProductService ProductService


@if (tables == null)
{
    <p><em>No Tables found</em></p>
}
else
{
    <p>Open Tables</p>
    @foreach (var table in tables)
    {
        if (table.status == Table.Status.Open)
        {
            <button @onclick="(() => UpdateTable(table))" type="button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">tableNr: @table.Id </button>

        }
    }
    <p>Taken Tables</p>
    @foreach (var table in tables)
    {
        if (table.status == Table.Status.Taken)
        {
            <button @onclick="(() => UpdateTable(table))" type="button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">tableNr: @table.Id </button>
        }
    }
}

@code {
    IEnumerable<Table> tables;
    IEnumerable<Product> products;

    public int amountOfTakenTables { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        tables = await TableService.GetTables();
        products = await ProductService.GetProducts();

        foreach (var item in tables)
        {
            if(item.status == Table.Status.Taken)
            {
                Table.isTaken = true;
            }
        }

    }
    protected async Task UpdateTable(Table table)
    {

        amountOfTakenTables = 0;

        foreach (var item in tables)
        {
            if (item.status == Table.Status.Taken)
            {
                //Console.WriteLine(item.status);
                amountOfTakenTables++;
                Console.WriteLine(amountOfTakenTables);
            }

        }

        if (table.status == Table.Status.Taken)
        {
            table.status = Table.Status.Open;
            await TableService.EditTable(table.Id, table);
            Table.isTaken = false;
        }
        else
        {
            if (amountOfTakenTables == 0)
            {
                table.status = Table.Status.Taken;
                await TableService.EditTable(table.Id, table);
                Table.isTaken = true;

            }
            else
            {
                Console.WriteLine("Önly one table can be opened at a time");
            }


        }
    }
}
