@inject IModalService ModalService
@inject ITableService TableService
@inject IOperationService OperationService
@inject IProductService ProductService
@inject IToastService ToastService

<div class="container d-flex flex-row">
    @if (tables == null)
    {
        <p><em>No Tables found</em></p>
    }
    else
    {<div class="d-flex flex-column m-1">
            <p style="text-align:center;">Open Tables</p>
            @foreach (var table in tables)
            {
                if (table.status == Table.Status.Open)
                {
                    <button @onclick="(() => UpdateTable(table))" type="button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">@table.Id </button>

                }
            }
        </div>
        <div class="d-flex flex-column m-1">
            <p style="text-align:center">Taken Tables</p>
            @foreach (var table in tables)
            {
                if (table.status == Table.Status.Taken)
                {
                    <button type="button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">@table.Id </button>
                }
            }
        </div>
    }
</div>
<button type="button" @onclick="@(() => TableSelectClose())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Close </button>

@code {

    [Parameter] public bool orderIsEmpty { get; set; }
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    IEnumerable<Table> tables;
    IEnumerable<Product> products;

    bool IsTaken = false;



    Operation operation = new Operation();

    public int amountOfTakenTables { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        tables = await TableService.GetTables();
        products = await ProductService.GetProducts();
        operation.UserId = User.CurrentId;

        foreach (var item in tables)
        {
            if (item.status == Table.Status.Taken)
            {
                Table.isTaken = true;
            }
        }

    }
    protected async Task UpdateTable(Table table)
    {

        amountOfTakenTables = 0;

        foreach (var item in tables)
        {
            if (item.status == Table.Status.Taken)
            {
                amountOfTakenTables++;
                Console.WriteLine(amountOfTakenTables);
            }

        }

        if (table.status == Table.Status.Taken)
        {

            if (orderIsEmpty)
            {
                operation.Description = User.CurrentUsername + "has registered table" + table.Id + "as open";
                table.status = Table.Status.Open;
                await TableService.EditTable(table.Id, table);
                await OperationService.CreateOperation(operation);
                Table.isTaken = false;
                //Table.CurrentTable = 0;
            }
            else
            {

                var ConfirmationModal = ModalService.Show<TableConfirmation>("Weet je zeker dat je de tafel vrij wilt maken?");
                var result = await ConfirmationModal.Result;

                if ((bool)result.Data == false)
                {
                    ToastService.ShowToast(ToastLevel.Info, "Action cancelled");
                }
                else
                {

                    operation.Description = User.CurrentUsername + "has registered table" + table.Id + "as open";
                    table.status = Table.Status.Open;
                    await TableService.EditTable(table.Id, table);
                    await OperationService.CreateOperation(operation);
                    Table.isTaken = false;
                    //Table.CurrentTable = 0;
                }
            }
        }
        else
        {
            //if (amountOfTakenTables == 0)
            //{
                operation.Description = User.CurrentUsername + "has registered table" + table.Id + "as taken";

                table.status = Table.Status.Taken;
                await OperationService.CreateOperation(operation);
                await TableService.EditTable(table.Id, table);
                Table.isTaken = true;
                //Table.CurrentTable = table.Id;

            //}
            //else
            //{
                //Console.WriteLine("Önly one table can be opened at a time");
            //}


        }


    }
    protected async Task TableSelectClose()
    {

        IEnumerable<Table> tables;
        List<Table> SelectedTables = new List<Table>();

        tables = await TableService.GetTables();

        foreach (var item in tables)
        {
            if(item.status == Table.Status.Taken)
            {
                IsTaken = true;
                SelectedTables.Add(item);
            }

        }

        BlazoredModal.Close(ModalResult.Ok(SelectedTables));
    }
}
