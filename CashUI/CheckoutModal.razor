@inject IModalService ModalService
@inject IOrderService OrderService
@inject IOrderitemService OrderitemService
@inject ITableService TableService
@inject IToastService ToastService
@inject IOperationService OperationService
<div style="height:400px !important; overflow:auto;">
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Prijs</th>
                <th>Q</th>
                <th>Totaal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item1 in orderItems)
            {

                <tr>
                    <td>@item1.Product.Name</td>
                    <td>€@item1.Product.Price</td>
                    <td>@item1.Quantity</td>
                    <td>€@item1.TotalPrice</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<p>Totaal: €@TotalPrice</p>

<button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="(() => Checkout())">Submit</button>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public List<OrderItem> orderItems { get; set; }
    Operation operation = new Operation();

    public int LatestOrderId { get; set; }
    public double TotalPrice { get; set; }

    protected override async Task OnInitializedAsync()
    {

        IEnumerable<Order> orders;

        foreach (var item in orderItems)
        {
            TotalPrice += Math.Round(item.TotalPrice, 2);
        }

        orders = await OrderService.GetOrders();

        if (!orders.Any())
        {
            LatestOrderId = 1;
        }
        else
        {
            foreach (var item in orders)
            {
                LatestOrderId++;
            }

            LatestOrderId++;
        }


    }

    public async Task Checkout()
    {
        Order order = new Order();
        order.TableId = Table.CurrentTable;
        foreach (var item in orderItems)
        {
            order.TotalPrice += item.TotalPrice;
        }
        await OrderService.CreateOrder(order);


        foreach (var item in orderItems)
        {
            item.OrderId = LatestOrderId;
            item.ProductId = item.Product.Id;

            await OrderitemService.CreateOrderitem(item);
        }

        IEnumerable<Table> tables = await TableService.GetTables();
        foreach (var item in tables)
        {
            if(item.status == Table.Status.Taken)
            {
                item.status = Table.Status.Open;
                await TableService.EditTable(item.Id, item);
            }
        }
        Table.isTaken = false;

        operation.UserId = User.CurrentId;
        operation.Description = User.CurrentUsername + " has checked out order #" + LatestOrderId;
        await OperationService.CreateOperation(operation);
        orderItems.Clear();
        BlazoredModal.Close(ModalResult.Ok(orderItems));
        ToastService.ShowToast(ToastLevel.Success, "Order complete");

    }
}
