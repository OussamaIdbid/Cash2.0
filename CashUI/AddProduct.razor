@using CashModel
@using CashUI
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IOptionService OptionService
@inject IModalService ModalService


<h2>Create Product</h2>
<hr />
<div class="simple-form">

    <div class="form-group">
        <label for="name-field">Name</label>
        <input @bind="@product.Name" type="text" id="name-field" />
    </div>

    <div class="form-group">
        <label for="price-field">Price</label>
        <input @bind="@product.Price" type="text" id="price-field" />
    </div>
    <div class="form-group">
        <label for="textColor" class="control-label">Text Color</label>
        <select id='textColor-input' for="textColor" class="form-control" @bind="@product.textColor">
            <option id="textColor-placeholder" value="Selecteer een kleur"></option>
            <option value="Product.TextColor.white">white</option>
            <option value="Product.TextColor.black">black</option>
        </select>
    </div>
    <div class="form-group">
        <label for="Category" class="control-label">Category</label>
        <select id='category-input' for="Category" class="form-control" @bind="@product.CategoryId">
            <option id="category-placeholder" value="Selecteer categorie"></option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>



            }
        </select>
    </div>
    <div class="form-group">
        <label for="Category" class="control-label">Add options to Product</label>
        <input @bind="@option.Description" type="text" id="price-field" />
        <button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="(() => AddOption())">Add</button>
    </div>
    <div id="add-option-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Option</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in options)
                {
                    <tr>
                        <td>@item.Description</td>
                        <td style="cursor:pointer" @onclick="(() => RemoveOption(item))"><span class="material-icons">delete</span></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="ConfirmClose">Submit</button>
    <button class="btn  btn-primary shadow-sm checkout-button m-1" @onclick="CancelClose">Cancel</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    Product product = new Product();

    Option option = new Option();
    public List<Option> options = new List<Option>();

    IEnumerable<Product> products = new List<Product>();
    IEnumerable<Category> categories = new List<Category>();

    int LatestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategories();
        products = await ProductService.GetProducts();

        LatestId = (products.Last().Id) + 1;

        option.ProductId = LatestId;
        product.CategoryId = 0;
        product.Price = 0;
    }

    public async Task ConfirmClose()
    {

        if(product.CategoryId != 0  || product.Name != null || product.Price != 0 || product.Color != null)
        {
            await ProductService.CreateProduct(product);
            foreach (var item in options)
            {
                await OptionService.CreateOption(item);
            }

            BlazoredModal.Close();
        }


    }
    public void CancelClose()
    {
        BlazoredModal.Cancel();

    }
    public void AddOption()
    {
        Option newOption = new Option();
        newOption.Description = option.Description;
        newOption.ProductId = LatestId;
        options.Add(newOption);

        foreach (var item in options)
        {
            Console.WriteLine(item.Description);
        }

        option.Description = null;

    }
    public void RemoveOption(Option option)
    {
        options.Remove(option);
    }
}
