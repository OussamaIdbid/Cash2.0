@using CashModel
@using CashUI
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IModalService Modal
@inject IToastService ToastService

@page "/registration"


    <div class="container d-flex flex-column">
        <img class="align-self-center" src="/Images/output-onlinepngtools.png" alt="DeHaanLogo">
        <div class="row">
            <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
                <div class="card card-signin my-5">
                    <div class="card-body">
                        <h5 class="card-title text-center">Registratie</h5>
                        <form class="form-signin">
                            <div class="form-label-group">
                                <input @bind="@users.Username" id="inputEmail" class="form-control" placeholder="Username" required autofocus>
                                <label for="inputEmail">Username</label>
                            </div>

                            <div class="form-label-group">
                                <input @bind="@users.Password" id="inputPassword" class="form-control" placeholder="Password" required>
                                <label for="inputPassword">Password</label>
                            </div>
                            <div class="btn btn-light btn-block text-uppercase" @onclick="CreateUser">Registreer</div>
                            <hr class="my-4">

                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>



@code{
    User users = new User();

    IEnumerable<User> UserList = new List<User>();

    string password;


    public string EncryptString(string strEncrypted)
    {
        byte[] b = System.Text.ASCIIEncoding.ASCII.GetBytes(strEncrypted);
        Console.WriteLine(b);
        string encrypted = Convert.ToBase64String(b);
        Console.WriteLine(encrypted);
        return encrypted;
    }
    public string decryptString(string encrString)
    {
        byte[] b;
        string decrypted;

        try
        {
            b = Convert.FromBase64String(encrString);
            decrypted = System.Text.ASCIIEncoding.ASCII.GetString(b);
        }
        catch (FormatException fe)
        {
            decrypted = "";
        }
        return decrypted;
    }

    protected async Task CreateUser()
    {
        bool IsDuplicate = false;

        if (users.Username == null || users.Password == null)
        {
            ToastService.ShowToast(ToastLevel.Info, "Please fill in every required field");

        }
        else
        {
            if (!UserList.Any())
            {
                Console.WriteLine("saame");

                if (users.Username == users.Password)
                {
                    ToastService.ShowToast(ToastLevel.Info, "username and password are the same");


                }
                else
                {
                    password = EncryptString(users.Password);
                    users.Password = password;

                    Console.WriteLine(users.Password);

                    await UserService.CreateUser(users);

                    users = new User();

                    ToastService.ShowToast(ToastLevel.Success, "Successfully registered");

                    NavigationManager.NavigateTo("/");
                }

            }
            else
            {
                foreach (var item in UserList)
                {

                    if (item.Username == users.Username)
                    {


                        ToastService.ShowToast(ToastLevel.Info, "password or username already exists");

                        IsDuplicate = true;

                    }
                }
                if (IsDuplicate == false)
                {
                    password = EncryptString(users.Password);
                    users.Password = password;

                    Console.WriteLine(users.Password);

                    await UserService.CreateUser(users);

                    users = new User();

                    ToastService.ShowToast(ToastLevel.Success, "Successfully registered");
                    Console.WriteLine("registered");

                    NavigationManager.NavigateTo("/");

                }



            }
        }



    }






    protected override async Task OnInitializedAsync()
    {
        UserList = await UserService.GetUsers();
    }



}