@using CashModel
@using CashUI
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IUserService UserService
@inject IOperationService OperationService
@page "/"

    <div id="Landingscreen-container" class="container d-flex flex-column">
        <img class="align-self-center" src="/Images/output-onlinepngtools.png" alt="DeHaanLogo">
        <div class="row">
            <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
                <div class="card card-signin my-5">
                    <div class="card-body">
                        <h5 class="card-title text-center">Log in bij kassa</h5>
                        <form class="form-signin">
                            <div class="form-label-group">
                                <input @bind="@username" id="inputEmail" autocomplete="off" class="form-control" placeholder="Username" required autofocus>
                                <label for="inputEmail">Username</label>
                            </div>

                            <div class="form-label-group">
                                <input @bind="@password" id="inputPassword" type="@Toggle" class="form-control" placeholder="Password" required>
                                <label for="inputPassword">Password</label>
                            </div>
                            <div class="form-check">
                                <input type="checkbox" id="checkbox-password" @onclick="(() => ToggleVisibility())"/>
                                <label class="form-check-label" for="checkbox-password">Show password</label>
                            </div>

                            <div class="btn btn-lg btn-light btn-block text-uppercase" @onclick="(() => Auth())">Log in</div>
                            <hr class="my-4">
                        </form>
                             <div class="btn btn-lg btn-light btn-block" @onclick="(() => Register())">Aanmelden</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
@code{

    string username;
    string password;
    bool changeType = true;
    string Toggle => changeType ? "password": null;
    Operation operation = new Operation();

    IEnumerable<User> users = new List<User>();


    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsers();


    }

    public void ToggleVisibility()
    {
        changeType = !changeType;
    }
    protected async Task Auth()
    {
        bool isWrong = true;

        if(username == null || password == null)
        {
            ToastService.ShowToast(ToastLevel.Info, "please fill in the required fields");

        }
        else
        {
            if (!users.Any())
            {
                ToastService.ShowToast(ToastLevel.Error, "Currently no users registered");

            }
            else
            {
                foreach (var item in users)
                {

                    if (item.Username == username && decryptString(item.Password) == password)
                    {
                        Console.WriteLine("Right password");
                        Console.WriteLine(item.Id);

                        User.CurrentId = item.Id;
                        User.CurrentUsername = item.Username;

                        isWrong = false;

                    }

                }

                if (isWrong)
                {
                    ToastService.ShowToast(ToastLevel.Error, "Wrong Username or Password");
                }
                else
                {


                    ToastService.ShowToast(ToastLevel.Success, "Successfully logged in");
                    NavigationManager.NavigateTo("/cash");

                    User.IsloggedIn = true;

                    operation.Description = User.CurrentUsername + " has logged in";
                    operation.UserId = User.CurrentId;
                    await OperationService.CreateOperation(operation);
                }
            }
        }




    }
    public string decryptString(string encrString)
    {
        byte[] b;
        string decrypted;

        try
        {
            b = Convert.FromBase64String(encrString);
            decrypted = System.Text.ASCIIEncoding.ASCII.GetString(b);
        }
        catch (FormatException fe)
        {
            decrypted = "";
        }
        return decrypted;
    }
    void Register()
    {
        NavigationManager.NavigateTo("/registration");

    }
}