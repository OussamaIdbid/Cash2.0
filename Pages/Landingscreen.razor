@using CashModel
@using CashUI
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IUserService UserService
@page "/"

<div class="container">
    <div class="row">
        <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
            <div class="card card-signin my-5">
                <div class="card-body">
                    <h5 class="card-title text-center">Sign In</h5>
                    <form class="form-signin">
                        <div class="form-label-group">
                            <input @bind="@username" id="inputEmail" autocomplete="off" class="form-control" placeholder="Username" required autofocus>
                            <label for="inputEmail">Username</label>
                        </div>

                        <div class="form-label-group">
                            <input @bind="@password" id="inputPassword" type="password" class="form-control" placeholder="Password" required>
                            <label for="inputPassword">Password</label>
                        </div>
                        <div class="btn btn-lg btn-light btn-block text-uppercase" @onclick="(() => Auth())">Sign in</div>
                        <hr class="my-4">
                    </form>
                    <div class="btn btn-light btn-block text-uppercase" @onclick="(() => Register())">Sign in</div>


                </div>
            </div>
        </div>
    </div>
</div>
@code{


    string username;
    string password;
    IEnumerable<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsers();


    }


    void Auth()
    {
        bool isWrong = false;

        if(!users.Any())
        {
            ToastService.ShowToast(ToastLevel.Error, "Currently no users registered");

        }
        else
        {
            foreach (var item in users)
            {

                if (item.Username == username && decryptString(item.Password) == password)
                {
                    ToastService.ShowToast(ToastLevel.Success, "Successfully logged in");
                    NavigationManager.NavigateTo("/cash");
                    User.IsloggedIn = true;
                    isWrong = false;
                }
                else
                {
                    Console.WriteLine("wrong password");
                    isWrong = true;
                }



            }

            if (isWrong)
            {
                ToastService.ShowToast(ToastLevel.Error, "Wrong Username or Password");
            }
        }



    }
    public string decryptString(string encrString)
    {
        byte[] b;
        string decrypted;

        try
        {
            b = Convert.FromBase64String(encrString);
            decrypted = System.Text.ASCIIEncoding.ASCII.GetString(b);
        }
        catch (FormatException fe)
        {
            decrypted = "";
        }
        return decrypted;
    }
    void Register()
    {
        NavigationManager.NavigateTo("/registration");

    }
}