@using CashUI
@using CashModel
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IOperationService OperationService
@inject IToastService ToastService
@inject ITableService TableService
@page "/cash"

@if (User.IsloggedIn == false)
{
    <p>not logged in</p>
}
else
{
    <div class="d-flex flex-row">
        @if (SelectedTables == null)
        {

        }
        else
        {
        @foreach (var item in SelectedTables)
        {
            <button type="button" @onclick="@(() => Activate(item))" class="btn btn btn-primary shadow-sm checkout-button m-1">Table: @item.TableNumber </button>
            <button type="button" @onclick="@(() => CloseTable(item))" class="btn btn btn-primary shadow-sm checkout-button m-1"> Close table</button>

        }
        }

    </div>
    <div class="row" id="cash-container">
        <div id='left' class='rounded col-md-8'>
            <LeftContainer OnList1Changed="List1Changed"></LeftContainer>
        </div>

        <div id='right' class='rounded col-md-3 bg-white'>
            <Checkout>
                <OrderItems OnProductRemoved="ProductRemoved" OnPriceReduced="PriceReduced" OnPriceIncreased="PriceIncreased" orderItems="@SelectedTable.orderItems"></OrderItems>
            </Checkout>
            <div id='checkout-container' class="rounded">
                <div id="price-container" class='text-muted'>
                    <p id='subtotal'>Subtotal €@RoundedTotalPrice</p>
                    <p id='discount'>Discount €0</p>
                    <p id='total'>Total €@RoundedTotalPrice</p>
                </div>
                <div id="checkout-buttons-container">
                    <button type="button" @onclick="(() => Checkout())" id="pin-button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Checkout</button>
                    <button type="button" @onclick="@(() => TableSelect())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Tables </button>

                </div>
            </div>
        </div>
    </div>




}



@code{
    Operation operation = new Operation();
    IEnumerable<Table> tables;
    string Username = User.CurrentUsername;
    public List<OrderItem> CurrentList1 = new List<OrderItem>();
    public List<OrderItem> NewOrderlist = new List<OrderItem>();
    string key = "Tables";
    public List<Table> SelectedTables { get; set; }
    string key1 = "Table";
    public Table SelectedTable = new Table();

    public double totalPrice;
    public double RoundedTotalPrice;



    protected override async Task OnInitializedAsync()
    {

        operation.UserId = User.CurrentId;
        //CurrentList1 = new List<OrderItem>();
        tables = await TableService.GetTables();
        Table.CurrentTable = 0;
        //foreach (var item in tables)
        //{
        //item.status = Table.Status.Open;
        //await TableService.EditTable(item.Id, item);
        //}

        SelectedTables = await localStorage.GetItemAsync<List<Table>>(key);
        //SelectedTable = await localStorage.GetItemAsync<Table>(key1);
        //Console.WriteLine(SelectedTables.Count);

    }






    [Parameter] public EventCallback<List<OrderItem>> OnList2Changed { get; set; }

    public async Task Activate(Table table)
    {
        foreach (var item in SelectedTables)
        {
            item.active = false;
        }
        table.active = true;
        Console.WriteLine(table.TableNumber + " is active");
        Table.CurrentTable = table.Id;
        SelectedTable = table;
        RoundedTotalPrice = 0;
        totalPrice = 0;
        Table.CurrentTable = table.Id;
        ToastService.ShowToast(ToastLevel.Info, "Table " + table.TableNumber + " is selected");



        if (SelectedTable.orderItems == null)
        {
            SelectedTable.orderItems = new List<OrderItem>();


        }
        else
        {
            foreach (var item in SelectedTable.orderItems)
            {

                totalPrice += item.TotalPrice;
                Console.WriteLine(item.TotalPrice);
                RoundedTotalPrice = Math.Round(totalPrice, 2);
            }
        }

        //await localStorage.SetItemAsync(key1, SelectedTable);

    }
    public async Task CloseTable(Table table)
    {


        var ConfirmationModal = ModalService.Show<TableConfirmation>("Weet je zeker dat je de tafel vrij wilt maken?");
        var result = await ConfirmationModal.Result;

        if (result.Cancelled)
        {
            ToastService.ShowToast(ToastLevel.Info, "Action cancelled");
        }
        else
        {
            table.status = Table.Status.Open;
            await TableService.EditTable(table.Id, table);
            SelectedTables.Remove(table);
            if (table.orderItems != null)
            {
                table.orderItems.Clear();
            }
            if (SelectedTable == table)
            {
                table.active = false;
                SelectedTable = new Table();
                Table.CurrentTable = 0;
                RoundedTotalPrice = 0;
                totalPrice = 0;
            }
        }

        await localStorage.SetItemAsync(key, SelectedTables);



    }
    public async void List1Changed(OrderItem List)
    {

        Console.WriteLine(List.Product.Name);
        //CurrentList1.Add(List);
        SelectedTables.Find(((x => x.Id == SelectedTable.Id))).orderItems.Add(List);
        //SelectedTable.orderItems.Add(List);
        foreach (var item in CurrentList1)
        {
            Console.WriteLine(item.Product.Name);
        }
        await OnList2Changed.InvokeAsync(SelectedTables.Find(((x => x.Id == SelectedTable.Id))).orderItems);
        Product.TotalPrice = 0;
        totalPrice = 0;
        foreach (var item in SelectedTable.orderItems)
        {
            totalPrice += item.TotalPrice;
            RoundedTotalPrice = Math.Round(totalPrice, 2);
        }
        await localStorage.SetItemAsync(key, SelectedTables);


    }

    public async void PriceReduced(double PriceReduction)
    {
        totalPrice -= PriceReduction;
        RoundedTotalPrice = Math.Round(totalPrice, 2);
    }
    public async void PriceIncreased(double PriceIncrease)
    {
        totalPrice += PriceIncrease;
        RoundedTotalPrice = Math.Round(totalPrice, 2);
    }
    public async void ProductRemoved(OrderItem orderItems)
    {

        SelectedTable.orderItems.Remove(orderItems);
    }


    public async Task TableSelect()
    {

        bool OrderIsEmpty = (!CurrentList1.Any()) ? true : false;
        Console.WriteLine("is order empty?" + OrderIsEmpty);

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        var parameters = new ModalParameters();
        parameters.Add(nameof(CashUI.TableSelect.orderIsEmpty), OrderIsEmpty);
        var TableModal = ModalService.Show<TableSelect>("Select Table", parameters, options);
        var result = await TableModal.Result;


        if (result.Cancelled)
        {
            Console.WriteLine("damn");
        }
        else
        {

            List<Table> AsyncTables = (List<Table>)result.Data;

            foreach (var item in AsyncTables)
            {
                item.orderItems = new List<OrderItem>();
            }

            if (!SelectedTables.Any())
            {
                foreach (var item in (List<Table>)result.Data)
                {
                    SelectedTables.Add(item);
                }
            }
            else
            {
                foreach (var item in (List<Table>)result.Data)
                {

                    if (SelectedTables.Exists(x => x.Id == item.Id))
                    {
                        Console.WriteLine("duplicate");
                    }
                    else
                    {
                        SelectedTables.Add(item);
                    }
                }


            }
            //SelectedTables = (List<Table>)result.Data;
            await localStorage.SetItemAsync(key, SelectedTables);

        }
    }
    public async Task Checkout()
    {
        if (Table.CurrentTable == 0 || !SelectedTable.orderItems.Any())
        {
            ToastService.ShowToast(ToastLevel.Info, "Order is empty");

        }
        else
        {

            var parameters = new ModalParameters();
            parameters.Add(nameof(CheckoutModal.orderItems), SelectedTable.orderItems);
            var checkoutModal = ModalService.Show<CheckoutModal>("Checkout", parameters);

            var result = await checkoutModal.Result;


            if (result.Cancelled)
            {
                ToastService.ShowToast(ToastLevel.Info, "Checkout Cancelled");
            }
            else
            {

                CurrentList1 = (List<OrderItem>)result.Data;
                RoundedTotalPrice = 0;
                SelectedTable.orderItems.Clear();
                SelectedTables.Remove(SelectedTable);
                SelectedTable = new Table();
                Table.CurrentTable = 0;



            }
        }

    }

}
