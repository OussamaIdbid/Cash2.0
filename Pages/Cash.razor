@using CashUI
@using CashModel
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IOperationService OperationService
@inject IToastService ToastService
@page "/cash"

@if (User.IsloggedIn == false)
{
    <p>not logged in</p>
}
else
{
<div class="d-inline-flex flex-column">
    <p>Welcome @Username</p>
    <button @onclick="(() => LogOut())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Log Out</button>
    <button @onclick="(() => Config())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Configuration</button>
</div>

    <div id='main-container' class='container d-inline-flex flex-row shadow-lg'>

        <div id='left' class='container col-8 justify-content-start'>
            <div id='top-bar' class='d-flex flex-row shadow-lg '>
                <i class="material-icons" id='menu-icon'>menu</i>
            </div>
            <LeftContainer OnList1Changed="List1Changed"></LeftContainer>
        </div>

        <div id='right' class='container col-4 bg-white'>
            <Checkout>
                <OrderItems OnProductRemoved="ProductRemoved" OnPriceReduced="PriceReduced" OnPriceIncreased="PriceIncreased" orderItems="@CurrentList1"></OrderItems>
            </Checkout>
            <div id='checkout-container'>
                <div id="price-container" class='text-muted'>
                    <p id='discount'>Discount</p>
                    <p id='subtotal'>Subtotal</p>
                    <p id='total'>Total €@RoundedTotalPrice</p>
                </div>
                <div id="checkout-buttons-container">
                    <button type="button"  @onclick="(() => Checkout())" id="pin-button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Checkout</button>
                    <button type="button" @onclick="@(() => TableSelect())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Tables </button>

                </div>
            </div>
        </div>

    </div>

}



@code{
    Operation operation = new Operation();
    string Username = User.CurrentUsername;
    public List<OrderItem> CurrentList1 = new List<OrderItem>();
    public List<OrderItem> NewOrderlist = new List<OrderItem>();

    public double totalPrice;
    public double RoundedTotalPrice;



    protected override async Task OnInitializedAsync()
    {
        operation.UserId = User.CurrentId;
        CurrentList1 = new List<OrderItem>();
    }

    [Parameter] public EventCallback<List<OrderItem>> OnList2Changed { get; set; }

    public async void List1Changed(List<OrderItem> List)
    {
        CurrentList1 = List;
        await OnList2Changed.InvokeAsync(CurrentList1);
        Product.TotalPrice = 0;
        totalPrice = 0;
        for (int i = 0; i < CurrentList1.Count; i++)
        {
            totalPrice += CurrentList1[i].TotalPrice;
            RoundedTotalPrice = Math.Round(totalPrice, 2);
        }

    }

    public async void PriceReduced(double PriceReduction)
    {
        totalPrice -= PriceReduction;
        RoundedTotalPrice = Math.Round(totalPrice, 2);
    }
    public async void PriceIncreased(double PriceIncrease)
    {
        totalPrice += PriceIncrease;
        RoundedTotalPrice = Math.Round(totalPrice, 2);
    }
    public async void ProductRemoved(List<OrderItem> orderItems)
    {

        CurrentList1 = orderItems;
    }


    public async Task TableSelect()
    {

        bool OrderIsEmpty = (!CurrentList1.Any()) ? true : false;
        Console.WriteLine("is order empty?" + OrderIsEmpty);

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true
        };
        var parameters = new ModalParameters();
        parameters.Add(nameof(CashUI.TableSelect.orderIsEmpty), OrderIsEmpty);
        var TableModal = ModalService.Show<TableSelect>("Submit product", parameters,options);
        var result = await TableModal.Result;

        if((bool)result.Data == false)
        {
            CurrentList1.Clear();
        }
    }
    public async Task Checkout()
    {
        if(CurrentList1.Count == 0)
        {
            ToastService.ShowToast(ToastLevel.Info, "Order is empty");

        }
        else
        {


            var parameters = new ModalParameters();
            parameters.Add(nameof(CheckoutModal.orderItems), CurrentList1);
            var checkoutModal = ModalService.Show<CheckoutModal>("Checkout", parameters);

            var result = await checkoutModal.Result;


            if (result.Cancelled)
            {
                ToastService.ShowToast(ToastLevel.Info, "Checkout Cancelled");
            }
            else
            {

                CurrentList1 = (List<OrderItem>)result.Data;
                RoundedTotalPrice = 0;
                //Console.WriteLine(CurrentList1.Count);

            }
        }

    }

    protected async Task LogOut()
    {
        operation.Description = User.CurrentUsername + " has logged out";

        User.IsloggedIn = false;
        NavigationManager.NavigateTo("/");
        ToastService.ShowToast(ToastLevel.Success, "Logged out");
        await OperationService.CreateOperation(operation);
    }

    protected async Task Config()
    {
        operation.Description = User.CurrentUsername + " clicked on the configuration page";
        await OperationService.CreateOperation(operation);
        NavigationManager.NavigateTo("/configuration");

    }

}
