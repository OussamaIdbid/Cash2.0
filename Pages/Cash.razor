@using CashUI
@using CashModel
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IToastService ToastService
@page "/cash"

@if (User.IsloggedIn == false)
{
    <p>not logged in</p>
}
else
{
<div class="d-inline-flex flex-column">
    <button @onclick="(() => LogOut())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Log Out</button>
    <button @onclick="(() => Config())" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Configuration</button>
</div>




    <div id='main-container' class='container d-inline-flex flex-row shadow-lg'>

        <div id='left' class='container col-8 justify-content-start'>
            <div id='top-bar' class='d-flex flex-row shadow-lg '>
                <i class="material-icons" id='menu-icon'>menu</i>
            </div>
            <LeftContainer OnList1Changed="List1Changed"></LeftContainer>
        </div>

        <div id='right' class='container col-4 bg-white'>
            <Checkout>
                <OrderItems orderItems="@CurrentList1"></OrderItems>
            </Checkout>
            <div id='checkout-container'>
                <div id="price-container" class='text-muted'>
                    <p id='discount'>Discount</p>
                    <p id='subtotal'>Subtotal</p>
                    <p id='total'>Total €@totalPrice</p>
                </div>
                <div id="checkout-buttons-container">
                    <button type="button" id="cancel-button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Cancel</button>
                    <button type="button" id="pin-button" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Pin</button>
                    <button type="button" @onclick="@(() => ModalService.Show<CashUI.TableSelect>("Table Selection"))" class="btn btn-lg  btn-primary shadow-sm checkout-button m-1">Tables </button>

                </div>
            </div>
        </div>

    </div>

}



@code{
    public List<Product> CurrentList1 = new List<Product>();
    public double totalPrice;

    [Parameter] public EventCallback<List<Product>> OnList2Changed { get; set; }


    public async void List1Changed(List<Product> List)
    {
        CurrentList1 = List;
        await OnList2Changed.InvokeAsync(CurrentList1);
        totalPrice = 0;
        for (int i = 0; i < CurrentList1.Count; i++)
        {
            totalPrice += CurrentList1[i].Price;
        }

    }

    public void LogOut()
    {
        User.IsloggedIn = false;
        NavigationManager.NavigateTo("/");
        ToastService.ShowToast(ToastLevel.Success, "Logged out");
    }

    public void Config()
    {

        NavigationManager.NavigateTo("/configuration");

    }


    //public int SelectedId { get; set; } = 1;
    //ProductCategories category;
    //public ProductContainer container;

    //public void changeItem(int newItem)
    //{
    //    SelectedId = newItem;
    //    container.setId(newItem);

    //}
    //private void refreshComponent()
    //{

    //    //if(category.CurrentCategory == null)
    //    //{
    //    //    Console.WriteLine("ifjaifja");

    //    //}
    //    //else
    //    //{
    //    //    SelectedId = category.CurrentCategory.CategoryId;
    //    //    container.OnChange += StateHasChanged;
    //    //    Console.WriteLine("selected");


    //    //}

    //    container.setId(category.CurrentCategory.CategoryId);




    //}




}
